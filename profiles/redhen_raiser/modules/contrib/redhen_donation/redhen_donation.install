<?php

/**
 * @file
 * Schema and installation hooks for redhen donations module.
 */

/**
 * Implements hook_schema().
 */
function redhen_donation_schema() {
  $schema['redhen_donation'] = array(
    'description' => 'The base table for redhen_donation module.',
    'fields' => array(
      'donation_id' => array(
        'description' => 'The primary identifier for a donation.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The {redhen_donation_type}.type of this donation.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'entity_id' => array(
        'description' => 'The id of the entity this donation is associated with.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'entity_type' => array(
        'description' => 'The entity type of the entity this donation is associated with.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'author_uid' => array(
        'description' => 'The uid of the user who created this donation.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'contact_id' => array(
        'description' => 'The identifier of the RedHen contact who this donation is associated with.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'order_id' => array(
        'description' => 'The identifier of the Order this donation is associated with.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'line_item_id' => array(
        'description' => 'The identifier of the Commerce Line Item this donation is associated with.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'transaction_entity_type' => array(
        'description' => 'The entity type of the transaction (order or recurring) associated with this donation.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
      ),
      'transaction_entity_id' => array(
        'description' => 'The entity id of the transaction associated with this donation.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'pledged' => array(
        'description' => 'The amount pledged for this donation.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'received' => array(
        'description' => 'The actual amount received for this donation.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the donation was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'updated' => array(
        'description' => 'The Unix timestamp when the donation was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('donation_id'),
    'indexes' => array(
      'donation_author_uid' => array('author_uid'),
      'donation_contact_id' => array('contact_id'),
      'donation_type' => array(array('type', 4)),
      'transaction' => array('transaction_entity_type', 'transaction_entity_id'),
    ),
    'foreign keys' => array(
      'author' => array(
        'table' => 'user',
        'columns' => array('author_uid' => 'uid'),
      ),
      'contact' => array(
        'table' => 'redhen_contact',
        'columns' => array('contact_id' => 'contact_id'),
      ),
    ),
  );

  $schema['redhen_donation_entity'] = array(
    'description' => 'donation per-entity settings.',
    'fields' => array(
      'entity_id' => array(
        'description' => 'Entity id these donation settings are for.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'entity_type' => array(
        'description' => 'The entity type of the entity these donation settings are for.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'description' => 'Boolean indicating if donations are open (1) or closed (0) for the given entity',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'open' => array(
        'description' => 'Date to open donations. Or NULL to open immediately.',
        'mysql_type' => 'datetime',
        'pgsql_type' => 'timestamp',
        'sqlite_type' => 'varchar',
        'sqlsrv_type' => 'smalldatetime',
        'not null' => FALSE,
      ),
      'close' => array(
        'description' => 'Date to close donations. Or NULL to never close automatically.',
        'mysql_type' => 'datetime',
        'pgsql_type' => 'timestamp',
        'sqlite_type' => 'varchar',
        'sqlsrv_type' => 'smalldatetime',
        'not null' => FALSE,
      ),
      'settings' => array(
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized object that stores additional donation settings.',
      ),
    ),
    'primary key' => array('entity_id', 'entity_type'),
  );

  $schema['redhen_donation_type'] = array(
    'description' => 'Stores information about all defined redhen donations types.',
    'fields' => array(
      'donation_type_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique donation type ID.',
      ),
      'name' => array(
        'description' => 'The machine-readable name of this donation type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this donation type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this donation type in relation to others.',
      ),
      'locked' => array(
        'description' => 'A boolean indicating whether the administrator may delete this type.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this donation type.',
        'merge' => TRUE,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'settings' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized object that stores additional donation type settings.',
      ),
    ),
    'primary key' => array('donation_type_id'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  // Create cache bins for Entity-cache module.
  $cache_schema = drupal_get_schema_unprocessed('system', 'cache');
  $types = array(
    'redhen_donation',
    'redhen_donation_type',
  );

  foreach ($types as $type) {
    $schema["cache_entity_$type"] = $cache_schema;
    $schema["cache_entity_$type"]['description'] = "Cache table used to store $type entity records.";
  }

  return $schema;
}

/**
 * Implements hook_field_schema().
 */
function redhen_donation_field_schema($field) {
  $columns = array(
    'redhen_donation_type' => array(
      'type' => 'varchar',
      'length' => 32,
      'not null' => FALSE,
    ),
  );
  $indexes = array(
    'redhen_donation_type' => array('redhen_donation_type'),
  );
  $foreign_keys = array(
    'redhen_donation_type' => array(
      'table' => 'redhen_donation_type',
      'columns' => array('redhen_donation_type' => 'name'),
    ),
  );
  return array(
    'columns' => $columns,
    'indexes' => $indexes,
    'foreign keys' => $foreign_keys,
  );
}

/**
 * Drop the status column from {redhen_donation}.
 */
function redhen_donation_update_7001() {
  db_drop_field('redhen_donation', 'status');
  drupal_get_schema('redhen_donation', TRUE);
}

/**
 * Set default configuration for "donate tab" display.
 */
function redhen_donation_update_7002() {
  foreach (redhen_donation_get_donation_instances() as $instance) {
    if (!isset($instance['settings']['donate_tab'])) {
      $instance['settings']['donate_tab'] = 1;
      field_update_instance($instance);
    }
  }
}

/**
 * Add the Line Item ID & Order ID properties to the donation entity table.
 */
function redhen_donation_update_7003() {
  $line_item_id = array(
    'description' => 'The identifier of the Commerce Line Item this donation is associated with.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  );
  db_add_field('redhen_donation', 'line_item_id', $line_item_id);
  $order_id = array(
    'description' => t('The order associated with this donation.'),
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  );
  db_add_field('redhen_donation', 'order_id', $order_id);
  $donations = entity_load('redhen_donation');
  foreach ($donations as $donation) {
    $wrapper = entity_metadata_wrapper('redhen_donation', $donation);
    $transaction = $wrapper->transaction_entity->value();
    if ('commerce_order' == $wrapper->transaction_entity_type->value()) {
      $order_wrapper = entity_metadata_wrapper('commerce_order', $transaction);
      // Set the Order Property:
      $donation->order_id = $order_wrapper->order_id->value();
      // Set the Line Item Property:
      foreach ($order_wrapper->commerce_line_items->value() as $line_item) {
        $donation_type = redhen_donation_type_load($donation->type);
        if ($line_item->type == $donation_type->settings['commerce_settings']['line_item_type']) {
          $donation->line_item_id = $line_item->line_item_id;
          break;
        }
      }
    }
    else {
      $wrapper = entity_metadata_wrapper('commerce_recurring', $transaction);
      $order = reset($wrapper->commerce_recurring_order->value());
      $donation->order_id = $order->order_id;

      // @todo: handle line item for cases where transaction entity is "commerce_recurring"
    }
    $donation->save();
  }
}

/**
 * Allow references to commerce orders to be null for redhen_donations.
 */
function redhen_donation_update_7004() {
  db_drop_unique_key('redhen_donation', 'transaction');
  db_change_field('redhen_donation', 'order_id', 'order_id', array(
    'description' => 'The identifier of the Order this donation is associated with.',
    'type' => 'int',
    'not null' => FALSE,
  ));
  db_change_field('redhen_donation', 'line_item_id', 'line_item_id', array(
    'description' => 'The identifier of the Commerce Line Item this donation is associated with.',
    'type' => 'int',
    'not null' => FALSE,
  ));
  db_change_field('redhen_donation', 'transaction_entity_type', 'transaction_entity_type', array(
    'description' => 'The entity type of the transaction (order or recurring) associated with this donation.',
    'type' => 'varchar',
    'length' => 32,
    'not null' => FALSE,
  ));
  db_change_field('redhen_donation', 'transaction_entity_id', 'transaction_entity_id', array(
    'description' => 'The entity id of the transaction associated with this donation.',
    'type' => 'int',
    'not null' => FALSE,
  ));
  db_add_index('redhen_donation', 'transaction', array('transaction_entity_type', 'transaction_entity_id'));
}

/**
 * Update Donation Type settings to use SKUs rather than Product IDs.
 */
function redhen_donation_update_7005() {
  $types = redhen_donation_get_types();
  foreach ($types as $type) {
    if ($one_time_product = commerce_product_load($type->settings['commerce_settings']['product_options']['one_time_product'])) {
      $type->settings['commerce_settings']['product_options']['one_time_product'] = $one_time_product->sku;
    }
    $new_recurring_config = array();
    if (!empty($type->settings['commerce_settings']['product_options']['recurring'])) {
      foreach ($type->settings['commerce_settings']['product_options']['recurring'] as $id => $value) {
        $rec_product = commerce_product_load($id);
        if ($rec_product) {
          $new_recurring_config[$rec_product->sku] = $value ? $rec_product->sku : 0;
        }
      }

      if (!empty($new_recurring_config)) {
        $type->settings['commerce_settings']['product_options']['recurring'] = $new_recurring_config;
      }
    }
    redhen_donation_type_save($type);
  }
}
